/*
 .----------------.  .----------------.  .----------------.  .----------------.  .----------------.   .----------------.   .----------------.  .----------------.  .----------------.  .----------------.  .----------------.  .----------------.   .----------------.   .----------------.  .----------------.  .----------------.  .-----------------. .----------------.  .----------------. 
| .--------------. || .--------------. || .--------------. || .--------------. || .--------------. | | .--------------. | | .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. | | .--------------. | | .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. |
| |    _______   | || |   ______     | || |  _________   | || | ____   ____  | || |  _________   | | | |      _       | | | |     _____    | || |  _________   | || |  _________   | || |   _____      | || |   _____      | || |   ________   | | | |      _       | | | | ____    ____ | || |  _______     | || |  _________   | || | ____  _____  | || |  ____  ____  | || |     ____     | |
| |   /  ___  |  | || |  |_   _ \    | || | |_   ___  |  | || ||_  _| |_  _| | || | |_   ___  |  | | | |     | |      | | | |    |_   _|   | || | |_   ___  |  | || | |_   ___  |  | || |  |_   _|     | || |  |_   _|     | || |  |  __   _|  | | | |     | |      | | | ||_   \  /   _|| || | |_   __ \    | || | |_   ___  |  | || ||_   \|_   _| | || | |_  _||_  _| | || |   .'    `.   | |
| |  |  (__ \_|  | || |    | |_) |   | || |   | |_  \_|  | || |  \ \   / /   | || |   | |_  \_|  | | | |  ___| |___   | | | |      | |     | || |   | |_  \_|  | || |   | |_  \_|  | || |    | |       | || |    | |       | || |  |_/  / /    | | | |  ___| |___   | | | |  |   \/   |  | || |   | |__) |   | || |   | |_  \_|  | || |  |   \ | |   | || |   \ \  / /   | || |  /  .--.  \  | |
| |   '.___`-.   | || |    |  __'.   | || |   |  _|  _   | || |   \ \ / /    | || |   |  _|  _   | | | | |___   ___|  | | | |   _  | |     | || |   |  _|  _   | || |   |  _|  _   | || |    | |   _   | || |    | |   _   | || |     .'.' _   | | | | |___   ___|  | | | |  | |\  /| |  | || |   |  __ /    | || |   |  _|  _   | || |  | |\ \| |   | || |    > `' <    | || |  | |    | |  | |
| |  |`\____) |  | || |   _| |__) |  | || |  _| |___/ |  | || |    \ ' /     | || |  _| |___/ |  | | | |     | |      | | | |  | |_' |     | || |  _| |___/ |  | || |  _| |___/ |  | || |   _| |__/ |  | || |   _| |__/ |  | || |   _/ /__/ |  | | | |     | |      | | | | _| |_\/_| |_ | || |  _| |  \ \_  | || |  _| |___/ |  | || | _| |_\   |_  | || |  _/ /'`\ \_  | || |  \  `--'  /  | |
| |  |_______.'  | || |  |_______/   | || | |_________|  | || |     \_/      | || | |_________|  | | | |     |_|      | | | |  `.___.'     | || | |_________|  | || | |_________|  | || |  |________|  | || |  |________|  | || |  |________|  | | | |     |_|      | | | ||_____||_____|| || | |____| |___| | || | |_________|  | || ||_____|\____| | || | |____||____| | || |   `.____.'   | |
| |              | || |              | || |              | || |              | || |              | | | |              | | | |              | || |              | || |              | || |              | || |              | || |              | | | |              | | | |              | || |              | || |              | || |              | || |              | || |              | |
| '--------------' || '--------------' || '--------------' || '--------------' || '--------------' | | '--------------' | | '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' | | '--------------' | | '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' |
 '----------------'  '----------------'  '----------------'  '----------------'  '----------------'   '----------------'   '----------------'  '----------------'  '----------------'  '----------------'  '----------------'  '----------------'   '----------------'   '----------------'  '----------------'  '----------------'  '----------------'  '----------------'  '----------------' 
*/

const fs = require('fs')
const acorn = require('acorn')

let skript = ""
fs.readdirSync('./src').forEach(file => {
    skript += convertFile(fs.readFileSync('./src/' + file).toString())
});



fs.writeFileSync('./src/index.sk', skript)

function convertFile(file) {
    const parsed = acorn.parse(file, {ecmaVersion: "latest"})

    parsed.body.forEach(body => {
        parseNode(body)
    });
}

function parseNode(node) {
    switch (node.type) {
        case 'ExpressionStatement':
            return parseNode(node.expression)
        case 'VariableDeclaration':
            return parseNode(node.declarations[0]) //I'm sure this won't be problamatic in the future
        case 'VariableDeclarator':
            return "set {" + node.id.name + "} to " + node.init.raw
        default:
            debugger
            console.error("Cannot parse expression of type " + node.type)
            process.exit(1)
        break
    }
}